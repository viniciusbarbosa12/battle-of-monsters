{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/monster-battle-card/monster-battle-card.component.ts","./src/app/components/monster-battle-card/monster-battle-card.component.html","./src/app/components/monster-card/monster-card.component.ts","./src/app/components/monster-card/monster-card.component.html","./src/app/components/monster-list/monster-list.component.ts","./src/app/components/monster-list/monster-list.component.html","./src/app/components/winner-display/winner-display.component.ts","./src/app/components/winner-display/winner-display.component.html","./src/app/services/monsters.service.ts","./src/app/views/battle-of-monsters/battle-of-monsters.component.ts","./src/app/views/battle-of-monsters/battle-of-monsters.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'assessment-cc-angular-sr-01';\n}\n","<app-battle-of-monsters></app-battle-of-monsters>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MonsterBattleCardComponent } from './components/monster-battle-card/monster-battle-card.component';\nimport { WinnerDisplayComponent } from './components/winner-display/winner-display.component';\nimport { MonsterCardComponent } from './components/monster-card/monster-card.component';\nimport { MonsterListComponent } from './components/monster-list/monster-list.component';\nimport { BattleOfMonstersComponent } from './views/battle-of-monsters/battle-of-monsters.component';\nimport { MonstersService } from './services/monsters.service';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDividerModule } from '@angular/material/divider';\n\nconst MaterialModules = [\n  MatCardModule,\n  MatProgressBarModule,\n  MatButtonModule,\n  MatDividerModule,\n];\n@NgModule({\n  declarations: [\n    AppComponent,\n    MonsterBattleCardComponent,\n    WinnerDisplayComponent,\n    MonsterCardComponent,\n    MonsterListComponent,\n    BattleOfMonstersComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    CommonModule,\n    MaterialModules,\n  ],\n  providers: [MonstersService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, Input } from '@angular/core';\nimport { Monster } from 'src/app/interfaces/monster.interface';\n\n@Component({\n  selector: 'app-monster-battle-card',\n  templateUrl: './monster-battle-card.component.html',\n  styleUrls: ['./monster-battle-card.component.scss'],\n})\nexport class MonsterBattleCardComponent {\n  @Input() public monster!: Monster | null;\n  @Input() public title: string | null = null;\n}\n","<div>\n    <mat-card class=\"battle-card-player centralized\">\n        <p class=\"title\">{{ title }}</p>\n    </mat-card>\n</div>","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Monster } from 'src/app/interfaces/monster.interface';\n\n@Component({\n  selector: 'app-monster-card',\n  templateUrl: './monster-card.component.html',\n  styleUrls: ['./monster-card.component.scss'],\n})\nexport class MonsterCardComponent {\n  @Input() public monster!: Monster | null;\n  @Input() public isSelected: boolean = false;\n  @Output() public selected = new EventEmitter();\n\n  handleMonsterClick(monster: Monster | null) {\n    this.selected.emit(monster);\n  }\n}\n","<mat-card class=\"card-monster\" [ngStyle]=\"{\n  'border': isSelected ? '1px solid black' : 'none'\n}\" (click)=\"handleMonsterClick(monster)\">\n    <img mat-card-image [src]=\"monster?.imageUrl\" class=\"image\" />\n    <p>{{ monster?.name }}</p>\n</mat-card>","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Monster } from 'src/app/interfaces/monster.interface';\n\n@Component({\n  selector: 'app-monster-list',\n  templateUrl: './monster-list.component.html',\n  styleUrls: ['./monster-list.component.scss'],\n})\nexport class MonsterListComponent {\n  @Output() public selected = new EventEmitter();\n  @Input() public monsters: Monster[] = [];\n  public selectedMonsterId: string | null = null;\n\n  monsterSelected(monster: Monster | null) {\n    if (monster!.id == this.selectedMonsterId) {\n      monster = null;\n    }\n    this.selectedMonsterId = monster?.id || null;\n    this.selected.emit(monster);\n  }\n}\n","<div>\n    <span class=\"title-select-monster\">\n        {{\n        monsters.length > 0 ? \"Select your monster\" : \"No monsters available\"\n        }}\n    </span>\n    <div class=\"list-monsters\">\n        <app-monster-card *ngFor=\"let monster of monsters\" [monster]=\"monster\"\n            [isSelected]=\"monster.id === selectedMonsterId\" (selected)=\"monsterSelected($event)\"></app-monster-card>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-winner-display',\n  templateUrl: './winner-display.component.html',\n  styleUrls: ['./winner-display.component.scss'],\n})\nexport class WinnerDisplayComponent {\n  @Input() public message: string | null = null;\n}\n","<div class=\"winner-box\">\n    <span class=\"message-winner\">{{ message }} wins!</span>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Monster } from '../interfaces/monster.interface';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\nexport class MonstersService {\n  constructor(private http: HttpClient) {}\n\n  getAll(): Observable<Monster[]> {\n    return this.http.get<Monster[]>(`${environment.API_URL}/monsters`);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Monster } from '../../interfaces/monster.interface';\nimport { MonstersService } from '../../services/monsters.service';\n\n@Component({\n  selector: 'app-battle-of-monsters',\n  templateUrl: './battle-of-monsters.component.html',\n  styleUrls: ['./battle-of-monsters.component.scss'],\n})\nexport class BattleOfMonstersComponent implements OnInit {\n  public player!: Monster | null;\n  public computer!: Monster | null;\n  public monsters: Monster[] = [];\n\n  constructor(private monsterService: MonstersService) {}\n\n  ngOnInit(): void {\n    this.monsterService.getAll().subscribe((res) => {\n      this.monsters = res;\n    });\n  }\n\n  monsterSelected(monster: Monster | null) {\n    this.player = monster;\n    this.computer = null;\n  }\n}\n","<div class=\"main-section\">\n    <span class=\"main-title\">Battle of Monsters</span>\n    <app-monster-list [monsters]=\"monsters\" (selected)=\"monsterSelected($event)\"></app-monster-list>\n    <div class=\"battle-section\">\n        <app-monster-battle-card [monster]=\"player\" [title]=\"player?player.name:'Player'\"></app-monster-battle-card>\n        <button mat-button class=\"start-battle-button\" [disabled]=\"!player\" [class.active]=\"player\"\n            [class.inactive]=\"!player\">\n            Start Battle\n        </button>\n        <app-monster-battle-card [monster]=\"computer\" title=\"Computer\">\n        </app-monster-battle-card>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  API_URL: 'http://localhost:4201'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}